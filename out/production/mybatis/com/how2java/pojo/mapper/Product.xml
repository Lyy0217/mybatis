<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace="com.how2java.pojo" 表示命名空间，在后续调用sql语句的时候会用到它-->
<mapper namespace="com.how2java.pojo.mapper">

    <!--
    1、listCategory 进行标示以供后续代码调用
    2、resultType="Product" 表示返回的数据和Product关联起来，
    这里本应该使用的是 com.how2java.pojo.Product, 但是在mybatis-config.xml中配置了别名，所以直接使用Product就行了

    -->
    <select id="listProduct" resultType="Product">
            select * from   product_
    </select>


    <resultMap type="Product" id="productBean">
        <id column="pid" property="id"/>
        <result column="pname" property="name"/>
        <result column="price" property="price"/>

        <!-- 多对一的关系 -->
        <!-- property: 指的是属性名称, javaType：指的是属性的类型 -->
        <association property="category" javaType="Category">
            <id column="cid" property="id"/>
            <result column="cname" property="name"/>
        </association>
    </resultMap>

    <!-- 根据id查询Product, 关联将Orders查询出来 -->
    <select id="ManyByOneListProduct" resultMap="productBean">
            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname' from product_ p left join category_ c on c.id = p.cid
    </select>

    <select id="getProduct" resultMap="productBean">
            select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname'
                from product_ p
                left join category_ c on c.id = p.cid
            where p.id = #{id}
    </select>

    <!--    动态sql语句的使用-->
    <select id="DynamicSqlListProduct" resultType="Product">
        select * from product_
        <where>
            <if test="name != null">
                and name like concat('%',#{name},'%')
            </if>
            <if test="price != null and price != 0">
                and price > #{price}
            </if>
        </where>

    </select>

    <!--    set标签中记得要有逗号，不然会报错-->
    <update id="DynamicSqlUpdateProduct" parameterType="Product">
        update product_
        <set>
            <if test="name != null">name=#{name},</if>
            <if test="price != null">price=#{price}</if>
        </set>
        where id = #{id}
    </update>

    <!--    trime标签替换-->
    <select id="TrimDynamicSqlListProduct" resultType="Product">
        select * from product_
        <trim prefix="where" prefixOverrides="and | or">
            <if test="name != null">
                and name like concat('%',#{name},'%')
            </if>
            <if test="price != null and price != 0">
                and price > #{price}
            </if>
        </trim>

    </select>


    <update id="TrimDynamicSqlUpdateProduct" parameterType="Product">
        update product_
        <trim prefix="set" suffixOverrides=",">
            <if test="name != null">name=#{name},</if>
            <if test="price != null">price=#{price}</if>
        </trim>
        where id = #{id}
    </update>

    <!--    choose标签：其作用是： 提供了任何条件，就进行条件查询，否则就使用id>1这个条件。-->
    <select id="chooseDynamicSqlListProduct" resultType="Product">
        select * from product_
        <where>
            <choose>
                <when test="name != null">
                    and name like concat('%',#{name},'%')
                </when>

                <when test="price != null and price > 0">
                    and price > #{price}
                </when>

                <otherwise>
                    id > 1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--    foreach标签    -->
    <select id="ForeachDynamicSqlListProduct" resultType="product">
        select * from product_
        WHERE id in
        <foreach collection="list" item="item" index="index"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--    bind标签   -->
    <select id="bindDynamicSqlListProduct" resultType="Product">
        <bind name="likename" value="'%' + name + '%'"/>
        select * from product_ where name like #{likename}
    </select>

</mapper>